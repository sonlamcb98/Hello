
interpreted: th√¥ng d·ªãch

ƒê·∫ßu ti√™n c√°c b·∫°n m·ªü terminal l√™n, ·ªü ƒë√¢y m√¨nh d√πng terminator , Trong th∆∞ m·ª•c hi·ªán t·∫°i ho·∫∑c b·∫•t c·ª© ƒë√¢u m√† b·∫°n mu·ªën, t·∫°o m·ªôt file test.sh, m·ªü file n√†y ra v√† g√µ v√†o nh∆∞ sau:

#!/bin/bash

echo ‚ÄúHello World !‚Äù

*ƒê·ªÉ th·ª±c thi file bash n√†y ch√∫ng ta ch·∫°y l·ªánh:
‚Üí bash test.sh
C√°c b·∫°n s·∫Ω th·∫•y ‚ÄúHello World‚Äù ƒë∆∞·ª£c in ra.

*C√°ch th·ª© 2 ƒë·ªÉ ch·∫°y file bash n√†y l√† b·∫°n c·∫•p quy·ªÅn execute cho n√≥ b·∫±ng l·ªánh
‚Üí chmod +x  test.sh
Sau ƒë√≥ ch·∫°y b·∫±ng l·ªánh
‚Üí ./test.sh 

*Bi·∫øn v√† tham s·ªë
T∆∞∆°ng t·ª± nh∆∞ c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh kh√°c, bash script c≈©ng c√≥ c√°c kh√°i ni·ªám bi·∫øn v√† tham s·ªë.
Tuy nhi√™n trong bash bi·∫øn ch·ªâ c√≥ 4 ki·ªÉu d·ªØ li·ªáu l√†:
1.String
2.integer
3.constant
4.Array
*VD:
name=‚Äùphuc‚Äù
age=16
echo $name //in ra
echo $age  //in ra

*Note: C√°c b·∫°n l∆∞u √Ω d·∫•u = ph·∫£i vi·∫øt li·ªÅn kh√¥ng ƒë∆∞·ª£c c√≥ d·∫•u c√°ch v√≠ d·ª• age = 16, s·∫Ω b√°o l·ªói c√∫ ph√°p.Bi·∫øn ph√¢n bi·ªát ch·ªØ hoa v√† ch·ªØ th∆∞·ªùng, v√≠ d·ª• bi·∫øn NAME s·∫Ω kh√°c bi·∫øn name

*Ti·∫øp theo ƒë·ªÉ truy·ªÅn tham s·ªë v√†o file bash ta m·ªü file test.sh v√† khai b√°o nh∆∞ sau:
name=$1 //$1 l√† tham s·ªë th·ª© nh·∫•t
age=$2  //$2 l√† tham s·ªë th·ª© 2
echo ‚ÄúName : ‚Äù $name
echo ‚ÄúAge : ‚Äù $age
L∆∞u file v√† ch·∫°y th·ª≠ b·∫±ng l·ªánh ‚Üí ./test.sh phuc 16


*********
TH1 : Weak quoting (nh√°y k√©p)
S·ª≠ d·ª•ng nh√°y k√©p khi b·∫°n mu·ªën bash th·ª±c thi c√°c bi·∫øn String ƒë∆∞·ª£c truy·ªÅn v√†o. V√≠ d·ª•, v·ªõi script nh∆∞ sau :

#!/usr/bin/env bash
world="World"
echo "Hello $world"
Output hi·ªán ra s·∫Ω l√† : Hello World

TH2 : Strong quoting (nh√°y ƒë∆°n)
S·ª≠ d·ª•ng nh√°y ƒë∆°n khi b·∫°n mu·ªën gi·ªØ nguy√™n n·ªôi dung trong d·∫•u nh√°y. V√≠ d·ª• :

#!/usr/bin/env bash
world="World"
echo 'Hello $world'
Output hi·ªán ra s·∫Ω l√† : Hello $world
********


*ƒê·ªÉ th·ª±c hi·ªán ph√©p to√°n trong bash script ta l√†m nh∆∞ sau, V√≠ d·ª• ta mu·ªën t√≠nh b√¨nh ph∆∞∆°ng c·ªßa m·ªôt s·ªë:
‚Üí ./test.sh 2
Ch√∫ng ta mu·ªën hi·ªÉn th·ªã ra m√†n h√¨nh k·∫øt qu·∫£ l√† : ‚ÄúB√¨nh phuong cua 2 l√† : 4‚Äù v·∫≠y trong file bash th√¨ l·∫°i l√†m nh∆∞ sau

number=$(($1 * $1))
echo ‚ÄúBinh phuong cua $1 la : $number‚Äù

*L·ªánh ƒëi·ªÅu ki·ªán
Trong bash script ta c≈©ng c√≥ c√°c l·ªánh ƒëi·ªÅu ki·ªán if, else nh∆∞ c√°c ng√¥n ng·ªØ kh√°c, tuy nhi√™n c√∫ ph√°p c√≥ ph·∫ßn ph·ª©c t·∫°p v√† kh√≥ nh·ªõ h∆°n, c√°c b·∫°n c·ªë g·∫Øng ti√™u h√≥a üòõ

Tr·ªü l·∫°i v·ªõi b√†i to√°n t√≠nh b√¨nh ph∆∞∆°ng ·ªü tr√™n, n·∫øu ta kh√¥ng nh·∫≠p tham s·ªë v√†o th√¨ thay v√¨ b·ªã b√°o l·ªói, ta s·∫Ω x·ª≠ l√Ω b·∫±ng l·ªánh ƒëi·ªÅu ki·ªán nh∆∞ sau:

if [ -z $1 ]; then
    echo "Chua nhap tham so"            
else
    number=$(($1 * $1))
    echo "Binh phuong cua $1 la : $number"
fi

=>: -z l√† n·∫øu kh√¥ng t·ªìn t·∫°i tham s·ªë 1

C√°c b·∫°n l∆∞u l·∫°i v√† ch·∫°y th·ª≠ v·ªõi hai tr∆∞·ªùng h·ª£p, 1 l√† kh√¥ng nh·∫≠p tham s·ªë, 2 l√† nh·∫≠p tham s·ªë l√† m·ªôt s·ªë b·∫•t k·ª≥.

*********
M·ªôt s·ªë ƒëi·ªÅu ki·ªán cho if, else kh√°c c√°c b·∫°n c√≥ th·ªÉ tham kh·∫£o b·∫£ng sau ƒë√¢y:
L·ªánh so s√°nh v·ªõi s·ªë
C√∫ ph√°p	√ù nghƒ©a
n1 -eq n2	Ki·ªÉm tra n1 = n2
n1 -ne n2	Ki·ªÉm tra n1 kh√°c n2
n1 -lt n2	Ki·ªÉm tra n1 < n2
n1 -le n2	Ki·ªÉm tra n1 <= n2
n1 -gt n2	Ki·ªÉm tra n1 > n2
n1 -ge n2	Ki·ªÉm tra n1 >= n2
L·ªánh so s√°nh v·ªõi chu·ªói
C√∫ ph√°p	√ù nghƒ©a
s1 = s2	Ki·ªÉm tra s1 = s2
s1 != s2	Ki·ªÉm tra s1 kh√°c s2
-z s1	Ki·ªÉm tra s1 c√≥ k√≠ch th∆∞·ªõc b·∫±ng 0
-n s1	Ki·ªÉm tra s1 c√≥ k√≠ch th∆∞·ªõc kh√°c 0
s1	Ki·ªÉm tra s1 kh√°c r·ªóng
To√°n t·ª≠ k·∫øt h·ª£p
Column 1	Column 2
!	Ph·ªß ƒë·ªãnh (not)
-a	V√† (and)
-o	Ho·∫∑c (or)
L·ªánh ki·ªÉm tra file (n√≥i chung cho c·∫£ t·ªáp v√† th∆∞ m·ª•c)
C√∫ ph√°p	√ù nghƒ©a
-f file	Ki·ªÉm tra xem file c√≥ ph·∫£i l√† t·ªáp hay kh√¥ng
-d file	Ki·ªÉm tra xem file c√≥ ph·∫£i l√† th∆∞ m·ª•c hay kh√¥ng
-r file	Ki·ªÉm tra file c√≥ ƒë·ªçc (read) ƒë∆∞·ª£c hay kh√¥ng
-w file	Ki·ªÉm tra file c√≥ ghi (write) ƒë∆∞·ª£c hay kh√¥ng
-x file	Ki·ªÉm tra file c√≥ th·ª±c thi (execute) ƒë∆∞·ª£c hay kh√¥ng
-s file	Ki·ªÉm tra file c√≥ k√≠ch th∆∞·ªõc l·ªõn h∆°n 0 hay kh√¥ng
-e file	Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i hay kh√¥ng

******

while do trong bash script
while command
do
   cac lenh de thuc thi neu command la true
done

#!/bin/sh
a=0
while [ $a -lt 10 ]
do
   echo $a
   a=`expr $a + 1`
done
******

******
case Statement Syntax
The Bash case statement takes the following form:

case EXPRESSION in

  PATTERN_1)
    STATEMENTS
    ;;

  PATTERN_2)
    STATEMENTS
    ;;

  PATTERN_N)
    STATEMENTS
    ;;

  *)
    STATEMENTS
    ;;
esac

* Each case statement starts with the case keyword, followed by the case expression and the in keyword. The statement ends with the esac keyword.
* You can use multiple patterns separated by the | operator. The ) operator terminates a pattern list.
* A pattern can have special characters .
* A pattern and its associated commands are known as a clause.
* Each clause must be terminated with ;;.
* The commands corresponding to the first pattern that matches the expression are executed.
* It is a common practice to use the wildcard asterisk symbol (*) as a final pattern to define the default case. This pattern will always match.
* If no pattern is matched, the return status is zero. Otherwise, the return status is the exit status of the executed commands

Example:
    case "$cmd" in
	1) echo "-----AppHomeScreen-----"
	   app_name="AppHomeScreen"
           ;;
	2) echo "-----AppSetup-----"
	   app_name="AppSetup"
           ;;
	3) echo "-----AppOSDManager-----"
	   app_name="AppOSDManager"
           ;;
	4) echo "-----NotificationManager-----"
	   app_name="NotificationManager"
           ;;
	5) echo "-----AppStandbyClock-----"
	   app_name="AppStandbyClock"
           ;;
	6) echo "-----AppMediaPlayer-----"
	   app_name="AppMediaPlayer"
           ;;

    esac
******

******
echo -n "=> please enter command: "; echo -n l√† kh√¥ng xu·ªëng d√≤ng
******
******
read variable   l√† ƒë·ªçc d·ªØ li·ªáu variable ƒë∆∞·ª£c nh·∫≠p t·ª´ terminal
******
t√¨m hi·ªÉu l·ªánh mount, remount, ssh root, scp, tar, rm
******